Recurrent neural networks (RNNs), including Long Short-Term Memory (LSTM) \citep{hochreiter1997} and Gated Recurrent Units (GRUs) \citep{gruEval14}, have long been foundational in sequence modeling and transduction tasks such as language modeling and machine translation \citep{sutskever14, bahdanau2014neural, cho2014learning}. These models factor computation along the symbol positions of input and output sequences, generating a sequence of hidden states $h_t$ as a function of the previous hidden state $h_{t-1}$ and the input at position $t$. This sequential nature, however, limits parallelization within training examples, particularly for long sequences, where memory constraints further hinder the ability to batch across examples.

Despite advances in computational efficiency through techniques such as factorization \citep{Kuchaiev2017Factorization} and conditional computation \citep{shazeer2017outrageously}, the fundamental issue of sequential computation remains a bottleneck. In parallel, attention mechanisms have emerged as a powerful tool for sequence modeling, enabling the modeling of dependencies without regard to their distance in the sequence \citep{bahdanau2014neural, structuredAttentionNetworks}. However, even in many attention-based models, the attention mechanism is typically employed in conjunction with recurrent networks.

In this work, we introduce the Transformer, a novel architecture that abandons recurrence altogether, relying solely on attention mechanisms to model global dependencies between input and output sequences. By removing recurrence, the Transformer model enables greater parallelization, significantly improving computational efficiency. For instance, the Transformer achieves state-of-the-art performance in machine translation after only twelve hours of training on eight P100 GPUs. This performance is a result of leveraging attention at multiple stages across the model, allowing it to attend to all parts of the input sequence at once, unlike RNN-based approaches that process inputs sequentially.

While recurrent models have dominated sequence-to-sequence tasks, there have been notable advancements that integrate attention into RNNs, such as self-attention mechanisms used in some recent architectures. These developments have made RNNs more efficient, but they still carry the inherent limitations of sequential processing. Moreover, efforts like the Neon work on self-attention have helped refine the handling of attention across sequences, demonstrating its potential even in non-recurrent models.

The Transformer, in contrast, moves beyond these limitations by constructing states from the inputs and outputs simultaneously, rather than sequentially. This model is inspired by recent advances such as Bytenet and FaceNet, which leverage architectures that can handle sequences in parallel. We aim to further advance this line of work by introducing an attention mechanism that operates across the entire sequence without relying on recurrent steps, thus enabling more efficient processing of long sequences and improving the scalability of models for large-scale datasets, such as those found on the web.

This paper presents an architecture that takes advantage of the power of attention, while eliminating the constraints of recurrence, opening up new avenues for sequence modeling and transduction tasks.

Although the primary workhorse of our model is attention, our model maintains the encoder-decoder structure that is common to many so-called sequence-to-sequence models. As in all such architectures, the encoder computes a representation of the input sequence, and the decoder consumes these representations along with the output tokens to autoregressively produce the output sequence. Where, traditionally, the encoder and decoder contain stacks of recurrent or convolutional layers, our encoder and decoder stacks are composed of attention layers and position-wise feed-forward layers. The following sections describe the gross architecture and these particular components in detail.

Most competitive neural sequence transduction models have an encoder-decoder structure. Here, the encoder maps an input sequence of symbol representations to a sequence of continuous representations. Given these, the decoder then generates an output sequence of symbols one element at a time. At each step the model is auto-regressive, consuming the previously generated symbols as additional input when generating the next.

The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder.

The encoder is composed of a stack of identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection around each of the two sub-layers, followed by layer normalization. That is, the output of each sub-layer is the result of applying the layer normalization after the residual connection. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of the same dimension.

The decoder is also composed of a stack of identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking ensures that the predictions for a given position can depend only on previous positions.

An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.

We call our particular attention "Scaled Dot-Product Attention". The input consists of queries and keys of certain dimensions, and values of another dimension. We compute the dot products of the query with all keys, divide each by the square root of the key dimension, and apply a softmax function to obtain the weights on the values.

In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix. The keys and values are also packed together into matrices. We compute the matrix of outputs as the softmax function applied to the scaled dot products of the query and key matrices, followed by multiplication with the value matrix.

While for small values of the key dimension the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of the key dimension. We suspect that for large values of the key dimension, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients.

Instead of performing a single attention function, we found it beneficial to linearly project the queries, keys and values multiple times with different, learned linear projections. On each of these projected versions of queries, keys and values, we then perform the attention function in parallel, yielding output values. These are concatenated and once again projected, resulting in the final values.

Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.

In this work, we employ multiple parallel attention layers. For each of these, we use certain dimensionality for keys and values. Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.

The Transformer uses multi-head attention in three different ways: in encoder-decoder attention layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. The encoder contains self-attention layers, and similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position.

In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.

Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of certain dimension. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation.

Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add "positional encodings" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension as the embeddings, so that the two can be summed. We use sine and cosine functions of different frequencies for the positional encodings.